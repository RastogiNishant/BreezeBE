paths:
  /api/v1/login:
    post:
      summary: login
      description: Login the user
      tags: [Accounts]
      name: User Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/login'
          application/x-www-form-urlencoded:
            schema:
              type: object
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: bearer
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjEzLCJpYXQiOjE2NDc4NzkwODMsImV4cCI6MTY1MDQ3MTA4M30
                        description: Token for JWT Bearer Auth
                      refreshToken:
                        type: string
                        example: null
                        description: Null for now                    
        '404':
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: string
                    example: error
                  data:
                    type: string
                    example: User not found
                  code:
                    type: integer
                    example: 0
        '422':
          description: 'Error: Unprocessable Entity'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  data:
                    type: object
                    properties:
                      password:
                        type: string
                        example: password is a required entity
      security: []
  /api/v1/me:
    get:
      summary: information of the current user
      description: Get all the information of the current user
      tags: [Accounts]
      security: [bearerAuth: []]
      name: The Current User
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/user'
    put:
      summary: update information of the current user
      description: Update information of the current user
      tags: 
        - Accounts
      security:
        - bearerAuth: []
      name: Update Current user
      requestBody:
        required: true
        content:
          application/json:
            type: object
            schema:
              $ref: '#/components/schemas/UpdateUser'
          application/x-www-form-urlencoded:
            type: object
            schema:
              $ref: '#/components/schemas/UpdateUser'
  /api/v1/logout:
    post:
      security: [bearerAuth: []]
      tags: [Accounts]
      summary: logout
      description: Logs the user out. This will only remove device_token from db so application must do something with the jwt token (forget) to completely log the user out.
      name: Logout
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/SuccessWithoutData'
  /api/v1/signup:
    post:
      tags: [Accounts]
      summary: sign up
      description: Sign up to the application
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              $ref: '#/components/schemas/CreateUser'            
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/CreateUser'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessWithoutData'
  /api/v1/housekeeperSignup:
    post:
      tags: [account]
      description: Sign up as a housekeeper to the application. *****member_id and owner_id come from '/api/v1/confirmsms *****
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: 
          
      produces: [application/json]
      parameters:
        - name: email
          in: formData
          type: string
          required: true
        - name: password
          in: formData
          type: string
          required: true
        - name: confirmPassword
          in: formData
          type: string
          required: true
        - name: member_id
          in: formData
          type: number
          required: true
        - name: owner_id
          in: formData
          type: number
          required: true
        - name: code
          in: formData
          type: string
          required: true          
        - name: phone
          in: formData
          type: string
          required: true
      responses: [200]      

  



                  



                